language: cpp

matrix:
  include:
    - os: linux
      dist: xenial
      env: QT_BASE=512 VER=6.0 STDFLAGS="-std=c++11 -std=c++14 -std=c++17" BUILD_TYPE=Release
      compiler: clang
      addons:
        apt:
          sources:
          - ubuntu-toolchain-r-test
          - llvm-toolchain-xenial-7
          packages:
          - clang-7

before_install:
  - if [ "$QT_BASE" = "512" ]; then sudo add-apt-repository ppa:beineri/opt-qt-5.12.0-xenial -y; fi
  - sudo apt-get update -qq

install:
  - sudo apt-get install libgl1-mesa-dev
  - if [ "$QT_BASE" = "512" ]; then sudo apt-get install -qq qt512base qt512connectivity qt512multimedia qt512svg qt512translations qt512tools qt512webchannel qt512webengine ; source /opt/qt512/bin/qt512-env.sh ; export QTHOME=/opt/qt512 ; fi

  # cmake
  - curl -o cmake.tar.gz -O https://cmake.org/files/v3.12/cmake-3.12.3-Linux-x86_64.tar.gz
  - mkdir /opt/cmake
  - tar -xf cmake.tar.gz -C /opt/cmake --strip-components=1
  - rm -f cmake.tar.gz
  - export PATH=/opt/cmake/bin:/opt/qt512/bin:${PATH}
  - export CMAKE_PREFIX_PATH=/opt/qt512:${CMAKE_PREFIX_PATH}
  - export CXXFLAGS="-std=c++14 -stdlib=libc++"

before_script:
  - mkdir -p build/appdir/usr
  - cd build
  - cmake --version
  - cmake -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_C_COMPILER=clang -DCMAKE_BUILD_TYPE=${BUILD_TYPE} -DCMAKE_CXX_FLAGS=${CXXFLAGS} -DENABLE_TESTING=ON -DCMAKE_INSTALL_PREFIX=/usr ..

script:
  - make -j$(nproc)
  - make test
  - make DESTDIR=appdir install 
  - cd ..
  - export VERSION=$(git rev-list master --count)
  - cd build
  - wget -c -nv "https://github.com/probonopd/linuxdeployqt/releases/download/6/linuxdeployqt-6-x86_64.AppImage"
  - chmod a+x linuxdeployqt-6-x86_64.AppImage
  - ./linuxdeployqt-6-x86_64.AppImage appdir/usr/share/applications/*.desktop -appimage -exclude-libs="libnss3.so,libnssutil3.so"

after_success:
  - find appdir -executable -type f -exec ldd {} \; | grep " => /usr" | cut -d " " -f 2-3 | sort | uniq
  - wget -c https://github.com/probonopd/uploadtool/raw/master/upload.sh
  - bash upload.sh Viper*.AppImage*

